import datetime
import json
import time
import urllib.parse

import pandas as pd
import requests
from dateutil.relativedelta import relativedelta

from config import cookie
from 世茂土地周期.解密demo import DecryptionProcess

cityType = {
    '北京': '深耕型', '上海': '深耕型', '广州': '深耕型', '深圳': '深耕型', '南京': '深耕型', '苏州': '深耕型', '厦门': '深耕型', '合肥': '深耕型', '天津': '深耕型',
    '武汉': '深耕型', '杭州': '深耕型', '福州': '深耕型', '济南': '深耕型', '南昌': '深耕型', '无锡': '据点型', '宁波': '深耕型', '成都': '深耕型', '郑州': '深耕型',
    '南宁': '深耕型', '长沙': '深耕型', '西安': '深耕型', '重庆': '深耕型', '青岛': '深耕型', '沈阳': '深耕型', '大连': '深耕型', '常州': '据点型', '徐州': '深耕型',
    '南通': '据点型', '嘉兴': '据点型', '绍兴': '据点型', '温州': '深耕型', '镇江': '据点型', '泉州': '据点型', '漳州': '据点型', '佛山': '据点型', '东莞': '据点型',
    '中山': '据点型', '惠州': '据点型', '珠海': '深耕型', '安庆': '机会型', '株洲': '机会型', '阜阳': '据点型', '芜湖': '据点型', '荆门': '机会型', '荆州': '机会型',
    '抚州': '机会型', '赣州': '据点型', '吉安': '机会型', '九江': '据点型', '信阳': '机会型', '南阳': '机会型', '淄博': '据点型', '临沂': '据点型', '兰州': '深耕型',
    '昆明': '深耕型', '宝鸡': '机会型', '德阳': '机会型', '哈尔滨': '深耕型', '湖州': '据点型', '江门': '据点型', '金华': '据点型', '丽水': '据点型',
    '龙岩': '据点型', '泸州': '机会型', '马鞍山': '机会型', '南平': '机会型', '内江': '机会型', '宁德': '机会型', '莆田': '据点型', '衢州': '据点型',
    '三明': '机会型', '汕头': '据点型', '石家庄': '深耕型', '台州': '据点型', '泰州': '据点型', '潍坊': '据点型', '烟台': '据点型', '盐城': '据点型',
    '银川': '深耕型', '长春': '深耕型', '肇庆': '机会型', '茂名': '据点型', '海口': '深耕型', '泰安': '据点型', '威海': '据点型', '包头': '据点型', '舟山': '据点型',
    '柳州': '据点型', '贵港': '机会型', '天水': '机会型', '淮南': '机会型', '玉林': '机会型', '牡丹江': '机会型', '宣城': '机会型', '张家界': '机会型',
    '德州': '机会型', '日照': '机会型', '淮北': '机会型', '广元': '机会型', '汉中': '机会型', '绵阳': '机会型'
}
cityLevel = {
    '北京': '一二线', '上海': '一二线', '广州': '一二线', '深圳': '一二线', '南京': '一二线', '苏州': '一二线', '厦门': '一二线', '合肥': '一二线', '天津': '一二线',
    '武汉': '一二线', '杭州': '一二线', '福州': '一二线', '济南': '一二线', '南昌': '一二线', '无锡': '三四线', '宁波': '一二线', '成都': '一二线', '郑州': '一二线',
    '南宁': '一二线', '长沙': '一二线', '西安': '一二线', '重庆': '一二线', '青岛': '一二线', '沈阳': '一二线', '大连': '一二线', '常州': '三四线', '徐州': '三四线',
    '南通': '三四线', '嘉兴': '三四线', '绍兴': '三四线', '温州': '三四线', '镇江': '三四线', '泉州': '三四线', '漳州': '三四线', '佛山': '三四线', '东莞': '三四线',
    '中山': '三四线', '惠州': '三四线', '珠海': '三四线', '安庆': '三四线', '株洲': '三四线', '阜阳': '三四线', '芜湖': '三四线', '荆门': '三四线', '荆州': '三四线',
    '抚州': '三四线', '赣州': '三四线', '吉安': '三四线', '九江': '三四线', '信阳': '三四线', '南阳': '三四线', '淄博': '三四线', '临沂': '三四线', '兰州': '一二线',
    '昆明': '一二线', '宝鸡': '三四线', '德阳': '三四线', '哈尔滨': '一二线', '湖州': '三四线', '江门': '三四线', '金华': '三四线', '丽水': '三四线',
    '龙岩': '三四线', '泸州': '三四线', '马鞍山': '三四线', '南平': '三四线', '内江': '三四线', '宁德': '三四线', '莆田': '三四线', '衢州': '三四线',
    '三明': '三四线', '汕头': '三四线', '石家庄': '一二线', '台州': '三四线', '泰州': '三四线', '潍坊': '三四线', '烟台': '三四线', '盐城': '三四线',
    '银川': '一二线', '长春': '一二线', '肇庆': '三四线', '茂名': '三四线', '海口': '一二线', '泰安': '三四线', '威海': '三四线', '包头': '三四线', '舟山': '三四线',
    '柳州': '三四线', '贵港': '三四线', '天水': '三四线', '淮南': '三四线', '玉林': '三四线', '牡丹江': '三四线', '宣城': '三四线', '张家界': '三四线',
    '德州': '三四线', '日照': '三四线', '淮北': '三四线', '广元': '三四线', '汉中': '三四线', '绵阳': '三四线'}
headers = {'accept': 'application/json, text/javascript, */*; q=0.01',
               'accept-encoding': 'gzip, deflate, br',
               'accept-language': 'zh-CN,zh;q=0.9',
               'cache-control': 'no-cache',
               'cookie': cookie,
               'pragma': 'no-cache',
               'referer': 'https://creis.fang.com/land/search/Index',
               'sec-fetch-mode': 'cors',
               'sec-fetch-site': 'same-origin',
               'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36',
               'x-requested-with': 'XMLHttpRequest', }

def get_time_range_list(startdate, enddate):
    """
        切分时间段
    """
    date_range_list = []
    startdate = datetime.datetime.strptime(startdate, '%Y-%m-%d')
    enddate = datetime.datetime.strptime(enddate, '%Y-%m-%d')
    while 1:
        tempdate = startdate + relativedelta(months=5)
        if tempdate > enddate:
            date_range_list.append(
                (str(startdate).replace("-", '').split(' ')[0], str(enddate).replace('-', '').split(' ')[0]))
            break
        date_range_list.append((str(startdate).replace("-", '').split(' ')[0],
                                str(tempdate - relativedelta(days=1)).replace('-', '').split(' ')[0]))
        startdate = tempdate
    return date_range_list


# 下载并解密数据
def download_Json(headers, data, df, allData):
    url = 'https://creis.fang.com/land/Search/GetLandSearch/'
    while True:
        time.sleep(3)
        try:
            res = requests.post(url, data=data, headers=headers, timeout=(2, 5))
        except:
            time.sleep(1*60)
            print('等待一分钟')
            continue

        try:
            data_3 = DecryptionProcess(res.text).decode_response()
            break
        except:
            print('重试0,..')
            time.sleep(10)
            continue


    print(' 当前统计数据量: ', data_3['datacount'])

    for i in data_3['datalist']:
        items = {}
        items['年'] = datetime.datetime.strptime(i['DENDDATE'], '%Y-%m-%d').year
        items['月'] = datetime.datetime.strptime(i['DENDDATE'], '%Y-%m-%d').month
        items['周'] = datetime.datetime.strptime(i['DENDDATE'], '%Y-%m-%d').isocalendar()[1]
        items['城市'] = i['SCITY'] if i['SCITY'][-1] != '市' else i['SCITY'][:-1]
        items['地块名称'] = i['SPARCELNAME']
        items['用地性质'] = i['SPARCELCONFORMING']
        items['建设用地面积(㎡)'] = i['FBUILDAREA']
        items['规划建筑面积(㎡)'] = i['FPLANNINGAREA']
        items['容积率'] = i['SPLOTRATION'].replace("&gt;", ">").replace('&lt;', '<')
        items['出让方式'] = i['SREMISEWAY']
        items['截止日期'] = i['DENDDATE']
        items['起始价(万元)'] = i['FINITIALPRICE']
        items['成交价(万元)'] = i['FCLOSINGCOST']
        items['成交楼面价(元/㎡)'] = i['FCLOSINGFLOORPRICE']
        items['溢价率'] = i['FAVGPREMIUMRATE']  # 1
        items['受让单位'] = i['STRANSFEREE']

        # 2019/11/28 添加字段 区县、
        items['区县'] = i['SDISTRICT']

        # 判断分数情况
        try:
            items['土地星级'] = "".join([j['finvestScore'][0] for j in data_3['scorelist'] if
                                     i['SPARCELID'].upper() == j['sParcelID'].upper()]) or ''
        except:
            items['土地星级'] = ''
        if len(items['土地星级']) != 0:
            try:
                if int(items['土地星级']) >= 5:
                    items['土地星级'] = '5星'
                else:
                    items['土地星级'] = items['土地星级'] + '星'
            except:
                items['土地星级'] = '0星'
        else:
            items['土地星级'] = '0星'

        # print(items['地块名称'], items['土地星级'])
        # items['溢价率分类'] = city
        # items['城市能级'] = df[df['城市'].str.contains(items['城市'])]['城市能级'].tolist()[0]
        items['城市能级'] = cityLevel.get(items['城市'])
        items['城市分类'] = cityType.get(items['城市'])
        allData.append(items)


# TODO  修改时间
# TODO  未来一个月
startdate, enddate = '2020-12-20', '2021-02-10'
df = pd.read_excel("预警城市新名单.xlsx")
allData = []

for startDate, endDate in get_time_range_list(startdate, enddate):
    ParamMeta = {
        "city": "500100,330100,330200,330300,330400,330500,330600,330700,330800,330900,331000,331100,530100,120100,510100,511000,510500,510600,510700,310100,610100,370100,370200,370300,370600,371300,370700,371400,371100,640100,150200,210100,210200,360100,360400,360800,361000,320100,320200,320300,320400,320500,320600,320900,321100,321200,220100,430100,430800,420100,421000,420800,230100,410100,411500,130100,460100,450100,450200,450800,440100,440300,440400,440500,440600,440900,441200,441300,441900,442000,620100,350100,350200,350300,350400,350500,350600,350700,350800,350900,110100,340100,340200,341200,340800,430200,450900,440700,620500,340400,341800,340600,340500,411300,610300,231000,360700,370900,371000,510800,610700",
        "country": "500113,500109,500104,500105,500107,500108,500106,500112,500103,330108,332000,330105,330104,332100,330102,330106,330103,330109,330110,330206,331600,330203,330205,330212,330211,330322,330303,330302,330304,330402,330411,330503,330502,330621,330682,330602,330703,330702,330802,330803,330902,330903,331003,331002,331004,331102,530121,530113,530111,530122,530103,530102,530112,120115,120113,120301,120110,120101,120105,120102,120103,120106,120225,120112,120223,120104,120221,120114,120111,510108,510103,510106,510104,510112,510124,510113,510105,510122,510186,510115,510107,510114,511011,511002,510502,510504,510503,510603,510626,510703,510751,510704,310113,310105,310230,310120,310109,310101,310114,310116,310106,310112,310115,310107,310118,310117,310104,310110,610111,610103,610131,610116,610126,610128,610132,610125,610129,610104,610115,610130,610112,610133,610102,610114,610113,370113,370184,370104,370125,370183,370112,370102,370103,370105,370181,370214,370211,370282,370212,370213,370203,370202,370304,370305,370303,370306,370302,370611,370635,370636,370613,370612,370602,371312,371302,371311,370704,370703,370705,370702,371402,371451,371421,371102,371103,640106,640105,640104,150206,150202,150207,150203,150204,150205,210104,210102,210105,210182,210122,210184,210103,210111,210106,210114,210251,210211,210255,210213,210212,210282,210204,210203,210202,360102,360106,360125,360126,360111,360104,360105,360103,360122,360421,360482,360402,360403,360802,360803,361029,361002,321800,320106,320105,320115,321700,320116,320111,320113,320104,320102,320114,320211,320206,320221,320205,320296,320302,320305,320311,320323,320303,320402,320412,320411,320404,320594,320508,320595,320584,320506,320507,320602,320611,320693,320683,320902,320903,321112,321102,321111,321203,321202,321284,220184,220104,220105,220186,220187,220181,220103,220106,220102,220185,220112,430102,430105,430103,430122,430111,430104,430811,430802,420114,420109,420112,420113,420105,420111,420116,420102,420103,420115,420119,420104,420107,420106,420117,421003,421002,420802,420804,230181,230102,230104,230111,230103,230108,230109,230106,410103,410187,410104,410189,410108,410105,410190,410106,410186,410102,411503,411502,130102,130182,130107,130185,130124,130104,130105,130108,460106,460108,460107,460105,450105,450108,450103,450107,450102,450109,450202,450205,450204,450203,450802,450803,450804,440111,445500,440113,440105,440114,440112,440103,440115,440106,440104,445400,440306,440313,440304,440312,440307,440310,440303,440305,440311,440314,440308,440403,440405,440404,440402,440514,440513,440515,440512,440511,440507,440604,440608,440605,440607,440606,440903,440902,441203,441202,441283,441326,441302,441303,441931,441927,441924,441906,441922,441920,441912,441901,441919,441904,441929,441914,441934,441905,441907,441915,441910,441925,441902,441921,441930,441923,441916,441917,441918,441926,441911,441908,441903,441913,441932,441933,441909,441928,442004,442005,442006,442001,442007,442008,442009,442010,442011,442012,442013,442014,442015,442002,442016,442017,442018,442019,442020,442021,442022,442023,442003,442024,620105,620102,620111,620103,620104,350104,350182,350102,350111,350105,350103,350205,350206,350211,350203,350212,350213,350302,350303,350304,350305,350402,350403,350503,350502,350504,350505,350603,350602,350784,350702,350802,350822,350902,110114,110105,110115,110101,110111,110106,110108,110116,110109,110228,110117,110107,110113,110112,110102,110229,340111,340141,340151,340152,340131,340103,340104,340102,340105,340202,340207,340208,340203,341203,341204,341202,340803,340811,340802,430202,430203,430204,430211,450902,440704,440703,440705,620503,620502,340405,340402,340406,340403,340404,341802,340602,340604,340603,340502,340503,340504,411302,411303,610304,610303,610302,231004,231002,231005,231003,360721,360782,360702,370903,370902,371002,371081,510812,510802,510811,610702,610721",
        "start": "0", "ordername": "enddate", "ordertype": "1", "num": "50", "proids": "", "conform": "住宅用地,综合用地(含住宅)",
        "idealstatus": "", "iremiseway": "", "startdate": "", "dealdate": "", "name": "", "tran": "", "sn": "",
        "anndateb": "", "planarea": "", "avgrate": "", "iniprice": "", "dealprice": "", "buildarea": "",
        "iniunitprice": "",
        "biaoshu": "", "ishaspic": "", "dealunitprice": "", "inifloorprice": "", "dealfloorprice": "", "boardids": "",
        "splotration": "", "sconforming": "", "ssecurityhousingtype": "",
        "sservicelife": "", "pinggutype": "0", "aerialMap": "", "sdetrusionpolicy": "", "sdealpolicy": ""}
    print('\n开始时间: ', startDate, '结束时间: ', endDate)
    ParamMeta['enddate'] = '%s,%s' % (startDate, endDate)
    data = {
        "jsonParameters": '%s' % ParamMeta,
        "rd": "42276.22970722953",
    }

    # 1. 获取当前分类有多少页
    while True:
        url = 'https://creis.fang.com/land/Search/GetLandSearch/'
        try:
            res = requests.post(url, data=data, headers=headers, timeout=(2, 5))
        except:
            print('超时, timeout')
            time.sleep(5)
            continue
        try:
            data_3 = DecryptionProcess(res.text).decode_response()
            break
        except Exception as e:
            print('重试0,..', e)
            time.sleep(10)
            continue
    print('data_3:', ' 当前统计数据量: ', data_3['datacount'])

    if int(data_3['datacount']) >= 750:
        print('时间范围过大, 请重新输入', startDate, endDate, )
        t1 = startDate[:-2] + '25'
        t2 = startDate[:-2] + '26'
        d1 = []
        d1.append(startDate)
        d1.append(t1)

        d2 = []
        d2.append(t2)
        d2.append(endDate)

        d3 = []
        d3.append(d1)
        d3.append(d2)
        for s, e in d3:
            ParamMeta = {
                "city": "500100,330100,330200,330300,330400,330500,330600,330700,330800,330900,331000,331100,530100,120100,510100,511000,510500,510600,510700,310100,610100,370100,370200,370300,370600,371300,370700,371400,371100,640100,150200,210100,210200,360100,360400,360800,361000,320100,320200,320300,320400,320500,320600,320900,321100,321200,220100,430100,430800,420100,421000,420800,230100,410100,411500,130100,460100,450100,450200,450800,440100,440300,440400,440500,440600,440900,441200,441300,441900,442000,620100,350100,350200,350300,350400,350500,350600,350700,350800,350900,110100,340100,340200,341200,340800,430200,450900,440700,620500,340400,341800,340600,340500,411300,610300,231000,360700,370900,371000,510800,610700",
                "country": "500113,500109,500104,500105,500107,500108,500106,500112,500103,330108,332000,330105,330104,332100,330102,330106,330103,330109,330110,330206,331600,330203,330205,330212,330211,330322,330303,330302,330304,330402,330411,330503,330502,330621,330682,330602,330703,330702,330802,330803,330902,330903,331003,331002,331004,331102,530121,530113,530111,530122,530103,530102,530112,120115,120113,120301,120110,120101,120105,120102,120103,120106,120225,120112,120223,120104,120221,120114,120111,510108,510103,510106,510104,510112,510124,510113,510105,510122,510186,510115,510107,510114,511011,511002,510502,510504,510503,510603,510626,510703,510751,510704,310113,310105,310230,310120,310109,310101,310114,310116,310106,310112,310115,310107,310118,310117,310104,310110,610111,610103,610131,610116,610126,610128,610132,610125,610129,610104,610115,610130,610112,610133,610102,610114,610113,370113,370184,370104,370125,370183,370112,370102,370103,370105,370181,370214,370211,370282,370212,370213,370203,370202,370304,370305,370303,370306,370302,370611,370635,370636,370613,370612,370602,371312,371302,371311,370704,370703,370705,370702,371402,371451,371421,371102,371103,640106,640105,640104,150206,150202,150207,150203,150204,150205,210104,210102,210105,210182,210122,210184,210103,210111,210106,210114,210251,210211,210255,210213,210212,210282,210204,210203,210202,360102,360106,360125,360126,360111,360104,360105,360103,360122,360421,360482,360402,360403,360802,360803,361029,361002,321800,320106,320105,320115,321700,320116,320111,320113,320104,320102,320114,320211,320206,320221,320205,320296,320302,320305,320311,320323,320303,320402,320412,320411,320404,320594,320508,320595,320584,320506,320507,320602,320611,320693,320683,320902,320903,321112,321102,321111,321203,321202,321284,220184,220104,220105,220186,220187,220181,220103,220106,220102,220185,220112,430102,430105,430103,430122,430111,430104,430811,430802,420114,420109,420112,420113,420105,420111,420116,420102,420103,420115,420119,420104,420107,420106,420117,421003,421002,420802,420804,230181,230102,230104,230111,230103,230108,230109,230106,410103,410187,410104,410189,410108,410105,410190,410106,410186,410102,411503,411502,130102,130182,130107,130185,130124,130104,130105,130108,460106,460108,460107,460105,450105,450108,450103,450107,450102,450109,450202,450205,450204,450203,450802,450803,450804,440111,445500,440113,440105,440114,440112,440103,440115,440106,440104,445400,440306,440313,440304,440312,440307,440310,440303,440305,440311,440314,440308,440403,440405,440404,440402,440514,440513,440515,440512,440511,440507,440604,440608,440605,440607,440606,440903,440902,441203,441202,441283,441326,441302,441303,441931,441927,441924,441906,441922,441920,441912,441901,441919,441904,441929,441914,441934,441905,441907,441915,441910,441925,441902,441921,441930,441923,441916,441917,441918,441926,441911,441908,441903,441913,441932,441933,441909,441928,442004,442005,442006,442001,442007,442008,442009,442010,442011,442012,442013,442014,442015,442002,442016,442017,442018,442019,442020,442021,442022,442023,442003,442024,620105,620102,620111,620103,620104,350104,350182,350102,350111,350105,350103,350205,350206,350211,350203,350212,350213,350302,350303,350304,350305,350402,350403,350503,350502,350504,350505,350603,350602,350784,350702,350802,350822,350902,110114,110105,110115,110101,110111,110106,110108,110116,110109,110228,110117,110107,110113,110112,110102,110229,340111,340141,340151,340152,340131,340103,340104,340102,340105,340202,340207,340208,340203,341203,341204,341202,340803,340811,340802,430202,430203,430204,430211,450902,440704,440703,440705,620503,620502,340405,340402,340406,340403,340404,341802,340602,340604,340603,340502,340503,340504,411302,411303,610304,610303,610302,231004,231002,231005,231003,360721,360782,360702,370903,370902,371002,371081,510812,510802,510811,610702,610721",
                "start": "0", "ordername": "enddate", "ordertype": "1", "num": "50", "proids": "",
                "conform": "住宅用地,综合用地(含住宅)",
                "idealstatus": "", "iremiseway": "", "startdate": "", "dealdate": "", "name": "", "tran": "", "sn": "",
                "anndateb": "", "planarea": "", "avgrate": "", "iniprice": "", "dealprice": "", "buildarea": "",
                "iniunitprice": "",
                "biaoshu": "", "ishaspic": "", "dealunitprice": "", "inifloorprice": "", "dealfloorprice": "",
                "boardids": "",
                "splotration": "", "sconforming": "", "ssecurityhousingtype": "",
                "sservicelife": "", "pinggutype": "0", "aerialMap": "", "sdetrusionpolicy": "", "sdealpolicy": ""}
            print(f's: {s}, e: {e}')

            ParamMeta['enddate'] = '%s,%s' % (s, e)
            data = {
                "jsonParameters": '%s' % ParamMeta,
                "rd": "42276.22970722953",
            }
            # 1. 获取当前分类有多少页
            while True:
                url = 'https://creis.fang.com/land/Search/GetLandSearch/'
                try:
                    res = requests.post(url, data=data, headers=headers, timeout=(2, 5))
                except:
                    print('超时, timeout')
                    time.sleep(5)
                    continue
                try:
                    data_3 = DecryptionProcess(res.text).decode_response()
                    break
                except:
                    print('重试0,..')
                    time.sleep(10)
                    continue
            print(' 当前统计数据量: ', data_3['datacount'])
            page = int(data_3['datacount']) // 50 + 1
            for i in range(page):
                print('当前页数: ', i + 1)
                ParamMeta['start'] = i * 50
                data = {
                    "jsonParameters": '%s' % ParamMeta,
                    "rd": "42276.22970722953",
                }
                download_Json(headers, data, df, allData)
    else:
        page = int(data_3['datacount']) // 50 + 1
        for i in range(page):
            print('当前页数: ', i + 1)
            ParamMeta['start'] = i * 50
            data = {
                "jsonParameters": '%s' % ParamMeta,
                "rd": "42276.22970722953",
            }
            download_Json(headers, data, df, allData)

df_all_data = pd.DataFrame(allData)
df_all_data = df_all_data[
    ["年", "月", "周", "地块名称", "城市", "用地性质", "区县", "出让方式", "建设用地面积(㎡)", "规划建筑面积(㎡)", "容积率", "截止日期", "受让单位", "起始价(万元)",
     "成交价(万元)", "成交楼面价(元/㎡)", "溢价率", "土地星级", "城市能级", '城市分类']]
df_all_data.to_excel("data/房企拿地/土地供应明细_{}.xlsx".format(startdate[:4]), index=False)

